{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"About longcallR","text":"<p>longcallR is a Rust tool for joint SNP calling, haplotype phasing, and allele-specific analysis using long RNA-seq reads.</p> <ul> <li>Installation</li> <li>Usage</li> <li>Allele_specific_expression</li> <li>Allele_specific_junction</li> <li>Citation</li> </ul>"},{"location":"ase.html","title":"Allele-specific expressed gene","text":""},{"location":"ase.html#allele-specific-expression-quantification","title":"Allele-Specific Expression Quantification","text":"<p>To quantify allele-specific gene expression based on the LongcallR-phased BAM, run the following command to get <code>output.ase.tsv</code>: <pre><code>python longcallR-ase.py\n-b &lt;phased_bam&gt; \n-a &lt;annotation&gt;\n-o &lt;output_prefix&gt;\n-t &lt;threads&gt;\n--gene_types &lt;gene_types&gt;\n--min_support &lt;min_support&gt;\n</code></pre> + -b, --bam: longcallR phased bam file + -a, --annotation: Annotation file GTF for GFF3 format + -o, --output: Prefix of output files + -t, --threads: Number of threads + --gene_types: Gene types to be analyzed. Default: [\"protein_coding\", \"lncRNA\"] + --min_support: Minimum support reads for counting event. Default: 10</p>"},{"location":"ase.html#high-confidence-ase-using-known-genomic-snps","title":"High-Confidence ASE Using Known Genomic SNPs","text":"<p>To increase confidence by requiring allele-specific expression to be supported by both LongcallR SNPs and known genomic SNPs, use the following command to get <code>output.filter_ase.tsv</code>: <pre><code>python longcallR-ase.py\n-b &lt;phased_bam&gt;\n--vcf1 &lt;longcallR_phased_vcf&gt;\n--vcf3 &lt;genomic_vcf&gt;\n-a &lt;annotation&gt;\n-o &lt;output_prefix&gt;\n-t &lt;threads&gt;\n--gene_types &lt;gene_types&gt;\n--min_support &lt;min_support&gt;\n</code></pre> + --vcf1: LongcallR phased vcf file + --vcf3: DNA vcf file</p>"},{"location":"ase.html#using-phased-genomic-vcf-for-parental-allele-resolution","title":"Using Phased Genomic VCF for Parental Allele Resolution","text":"<p>To assign allele-specific expression to paternal and maternal haplotypes, provide both the LongcallR-phased VCF and a whole-genome haplotype-phased DNA VCF, get <code>output.patmat_ase.tsv</code>: <pre><code>python longcallR-ase.py\n-b &lt;phased_bam&gt;\n--vcf1 &lt;longcallR_phased_vcf&gt;\n--vcf2 &lt;phased_genomic_vcf&gt;\n-a &lt;annotation&gt;\n-o &lt;output_prefix&gt;\n-t &lt;threads&gt;\n--gene_types &lt;gene_types&gt;\n--min_support &lt;min_support&gt;\n</code></pre> + --vcf1: LongcallR phased vcf file + --vcf2: Whole genome haplotype phased DNA vcf file</p>"},{"location":"ase.html#output-format","title":"Output format","text":"<p>1.output.ase.tsv or output.filter_ase.tsv</p> Column Description <code>#Gene_name</code> Gene symbol <code>Chr</code> Chromosome <code>PS</code> Phase set ID <code>H1</code> Read count assigned to haplotype 1 <code>H2</code> Read count assigned to haplotype 2 <code>P_value</code> Binomial test p-value for allelic imbalance <p>2.output.patmat_ase.tsv</p> Column Description <code>#Gene_name</code> Gene symbol <code>Chr</code> Chromosome <code>PS</code> Phase set ID <code>H1</code> Read count assigned to haplotype 1 <code>H2</code> Read count assigned to haplotype 2 <code>P_value</code> Binomial test p-value for allelic imbalance <code>H1_Paternal</code> Read count in H1 supporting the paternal allele <code>H1_Maternal</code> Read count in H1 supporting the maternal allele <code>H2_Paternal</code> Read count in H2 supporting the paternal allele <code>H2_Maternal</code> Read count in H2 supporting the maternal allele"},{"location":"asj.html","title":"Allele-specific junction","text":""},{"location":"asj.html#allele-specific-junction-quantification","title":"Allele-Specific Junction Quantification","text":"<p>To quantify allele-specific junction based on the LongcallR-phased BAM, run the following command: <pre><code>python longcallR-asj.py\n-b &lt;phased_bam&gt;\n-a &lt;annotation&gt;\n-f &lt;reference&gt;\n-o &lt;output_prefix&gt;\n-t &lt;threads&gt;\n-g &lt;gene_types&gt;\n-m &lt;min_sup&gt;\n</code></pre> + -b, --bam_file: longcallR phased bam file + -a, --annotation_file: Annotation file GTF for GFF3 format + -f, --reference: Reference genome file + -o, --output_prefix: Prefix of output files + -t, --threads: Number of threads + -g, --gene_types: Gene types to be analyzed. Default: [\"protein_coding\", \"lncRNA\"] + -m, --min_sup: Minimum support of phased reads for counting event. Default: 10</p>"},{"location":"asj.html#high-confidence-asj-using-known-genomic-snps","title":"High-Confidence ASJ Using Known Genomic SNPs","text":"<p>To increase confidence by requiring allele-specific junction to be supported by both longcallR's RNA SNPs and known genomic SNPs, use the following command: <pre><code>python longcallR-asj.py\n-b &lt;phased_bam&gt;\n-a &lt;annotation&gt;\n-f &lt;reference&gt;\n--dna_vcf &lt;genomic_vcf&gt;\n--rna_vcf &lt;rna_vcf&gt;\n-o &lt;output_prefix&gt;\n-t &lt;threads&gt;\n-g &lt;gene_types&gt;\n-m &lt;min_sup&gt;\n</code></pre> + --dna_vcf: DNA vcf file + --rna_vcf: longcallR phased RNA vcf file</p>"},{"location":"asj.html#store-allele-specific-junctions-in-bed-format-for-igv-visualization","title":"Store Allele-Specific Junctions in BED Format for IGV Visualization","text":"<p>To visualize allele-specific junctions in IGV, extract regions with a p-value below a specified threshold (default: 1e-10) and save them in BED format: <pre><code>python asj_to_bed.py output.asj.tsv [p_value_threshold] &gt; output.asj.bed\n</code></pre> - output.asj.tsv: Input file containing allele-specific junctions - p_value_threshold (optional): Significance threshold (default: 1e-10) - output.asj.bed: Output BED file for IGV visualization</p>"},{"location":"asj.html#output-format","title":"Output format","text":"<p>Running <code>longcallR-asj.py</code> will generate three output files <code>output.asj.tsv</code>, <code>output.asj_gene.tsv</code> and <code>output.gene_coverage.tsv</code>. The formats of these files are described below:</p> <p>1.output.asj.tsv</p> Column Description <code>#Junction</code> Junction coordinates in the format <code>chr:start-end</code> <code>Strand</code> Strand of the junction (<code>+</code> or <code>-</code>) <code>Junction_set</code> Junction set identifier (cluster of related junctions) <code>Phase_set</code> Phase set ID <code>Hap1_absent</code> Number of reads from haplotype 1 where the junction is absent <code>Hap1_present</code> Number of reads from haplotype 1 where the junction is present <code>Hap2_absent</code> Number of reads from haplotype 2 where the junction is absent <code>Hap2_present</code> Number of reads from haplotype 2 where the junction is present <code>P_value</code> P-value for allele-specific junction <code>SOR</code> Symmetric odds ratio <code>Novel</code> Whether the junction is novel (<code>TRUE</code> / <code>FALSE</code>) <code>GT_AG</code> Whether junction has canonical GT-AG splice sites (<code>TRUE</code> / <code>FALSE</code>) <code>Gene_name</code> Associated gene symbol <p>2.output.asj_gene.tsv</p> Column Description <code>#Gene_name</code> Gene symbol that containing allele-specific junctions <code>Chr</code> Chromosome <code>P_value</code> P-value for the most significant allele-specific junction in the gene <code>SOR</code> Symmetric odds ratio for the most significant allele-specific junction in the gene <p>3.output.gene_coverage.tsv</p> Column Description <code>#Gene_name</code> Gene symbol <code>Chr</code> Chromosome <code>Start</code> start position of gene, 1-based, inclusive <code>End</code> end position of gene, 1-based, inclusive <code>Num_reads</code> Number of reads in the gene"},{"location":"citation.html","title":"Citation","text":"<p>If you use longcallR in your research, please cite:</p> <p>Neng Huang, Heng Li, SNP calling, haplotype phasing and allele-specific analysis with long RNA-seq reads. bioRxiv, 2025. doi.org/10.1101/2025.05.26.656191.</p>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#install-from-source","title":"Install from source","text":"<pre><code>git clone https://github.com/huangnengCSU/longcallR.git\ncd longcallR\ncargo build --release\n</code></pre>"},{"location":"install.html#install-from-cratesio","title":"Install from crates.io","text":"<pre><code>cargo install longcallR\n</code></pre>"},{"location":"install.html#install-from-conda","title":"Install from conda","text":"<pre><code>mamba install longcallr\n</code></pre>"},{"location":"usage.html","title":"Usage","text":""},{"location":"usage.html#general-usage","title":"General Usage","text":"<p>To run <code>longcallR</code> for SNP calling and read phasing, use the following command: <pre><code>longcallR\n-b &lt;input.sorted.bam&gt;\n-f &lt;reference.fa&gt;\n-p &lt;preset&gt;\n-t &lt;threads&gt;\n-o &lt;output_prefix&gt;\n</code></pre></p> <ul> <li>-b, --bam-path: Input BAM file (must be sorted and indexed)</li> <li>-f, --ref-path: Reference FASTA file</li> <li>-p, --preset: Preset for sequencing platform</li> <li>-t, --threads: Number of threads</li> <li>-o, --output: Output file prefix</li> </ul> <p>Available Presets</p> Preset Description <code>hifi-masseq</code> PacBio Mas-Seq data (strand bias filtering disabled) <code>hifi-isoseq</code> PacBio Iso-Seq data (strand bias filtering enabled) <code>ont-cdna</code> ONT cDNA data (strand bias filtering enabled) <code>ont-drna</code> ONT direct RNA data (strand bias filtering disabled)"},{"location":"usage.html#advanced-usage","title":"Advanced Usage","text":"<p>To perform SNP calling and phasing in a specific genomic region, use the following command: <pre><code>longcallR\n-b &lt;input.sorted.bam&gt;\n-f &lt;reference.fa&gt;\n-p &lt;preset&gt;\n-t &lt;threads&gt;\n-r &lt;chr:start-end&gt;\n-o &lt;output_prefix&gt;\n</code></pre></p> <p>To perform SNP calling and phasing based on user-provided candidate SNPs (e.g., known genomic SNPs), use the following command: <pre><code>longcallR\n-b &lt;input.sorted.bam&gt;\n-f &lt;reference.fa&gt;\n-v &lt;input.vcf&gt;\n-p &lt;preset&gt;\n-t &lt;threads&gt;\n-o &lt;output_prefix&gt;\n</code></pre></p> <p>To customize thresholds for read coverage, read length, mapping quality, base quality, allele fraction, allele fraction for low fraction candidates (more challenge sites), strand bias filtering, use: <pre><code>longcallR\n-b &lt;input.sorted.bam&gt;\n-f &lt;reference.fa&gt;\n-p &lt;preset&gt;\n--min-depth &lt;min_depth&gt;\n--max-depth &lt;max_depth&gt;\n--min-read-length &lt;min_length&gt;\n--min-mapq &lt;min_mapq&gt;\n--min-baseq &lt;min_baseq&gt;\n--min-allele-freq &lt;min_allele_freq&gt;\n--low-allele-frac-cutoff &lt;low_allele_frac_cutoff&gt;\n--strand-bias &lt;strand_bias&gt;\n-t &lt;threads&gt;\n-o &lt;output_prefix&gt;\n</code></pre></p> <p>Full Arguments</p> <ul> <li>-b, --bam-path: Input BAM file (must be sorted and indexed)</li> <li>-f, --ref-path: Reference FASTA file</li> <li>-p, --preset: Preset for sequencing platform</li> <li>-t, --threads: Number of threads</li> <li>-o, --output: Output file prefix</li> <li>-a, --annotation: Annotation file, GFF3 or GTF format</li> <li>-r, --region: Region to be processed. Format: chr:start-end, left-closed, right-open</li> <li>-x, --contigs: Conitgs to be processed. Example: -x chr1 chr2 chr3</li> <li>-v , --input-vcf: Input vcf file as Candidate SNPs</li> <li>--min-allele-freq: Minimum allele frequency for high allele fraction candidate SNPs [Default: 0.20]</li> <li>--min-allele-freq-include-intron: Minimum allele frequency for high allele fraction candidate SNPs include intron [Default: 0.0]</li> <li>--low-allele-frac-cutoff: Minimum allele frequency for low allele fraction candidate SNPs [Default: 0.05]</li> <li>--low-allele-cnt-cutoff: Minimum allele count for low allele fraction candidate SNPs [Default: 10]</li> <li>--min-read-length: Minimum length for reads [Default: 500]</li> <li>--min-mapq: Minimum mapping quality for reads [Default: 20]</li> <li>--min-baseq: Minimim base quality for allele calling [Default: 10]</li> <li>--divergence: Max sequence divergence for valid reads [Default: 0.05]</li> <li>--min-depth: Minimum depth for a candidate SNP [Default: 10]</li> <li>--max-depth: Maximum depth for a candidate SNP [Default: 50000]</li> <li>--strand-bias: Whether to use strand bias to filter SNPs [Default: false] [possible values: true, false]</li> <li>--min-qual: Minimum QUAL for candidate SNPs [Default: 2]</li> <li>--distance-to-read-end: Ignore bases within distance to read end [Default: 20]</li> <li>--polya-tail-length: PolyA tail length threshold for filtering [Default: 5]</li> <li>--dense-win-size: Window size used to identify dense regions of candidate SNPs [Default: 500]</li> <li>--min-dense-cnt: Minimum number of candidate SNPs within the dense window to consider the region as dense [Default: 5]</li> <li>--min-linkers: Minimum number of related candidate heterozygous SNPs required to perform phasing in a region [Default: 1]</li> <li>--max-enum-snps: Maximum number of SNPs for enumerate haplotypes [Default: 10]</li> <li>--min-phase-score: Minimum phase score to filter candidate SNPs [Default: 8.0]</li> <li>--min-read-assignment-diff: Minimum absolute difference between haplotype assignment probabilities required for a read to be confidently assigned [Default: 0.15]</li> <li>--truncation: When set, apply truncation of high coverage regions</li> <li>--truncation-coverage: Read number threshold for region truncation [Default: 200000]</li> <li>--downsample: When set, allow downsampling of high coverage regions</li> <li>--downsample-depth: Downsample depth [Default: 10000]</li> <li>--exon-only: When set, only call SNPs in exons</li> <li>--no-bam-output: When set, do not output phased bam file</li> <li>--get-blocks: When set, show all regions to be processed.</li> </ul>"}]}